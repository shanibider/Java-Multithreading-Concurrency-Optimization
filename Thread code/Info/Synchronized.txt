Synchronized

Java is multi-threaded language where multiple threads runs parallel to complete their execution. 
We need to synchronize the shared resources to ensure that at a time only one thread is able to access the shared resource.
If an Object is shared by multiple threads then there is need of synchronization in order to 
avoid the Object’s state to be getting corrupted. Synchronization is needed when Object is mutable. 
If shared Object is immutable or all the threads which share the same Object are only reading 
the Object’s state not modifying then you don’t need to synchronize it.


Java programming language provide two synchronization idioms:
-> Methods synchronization:
Synchronized methods enables a simple strategy for preventing the thread interference and memory consistency errors. 
If a Object is visible to more than one threads, all reads or writes to that Object’s fields are done through the synchronized method.
It is not possible for two invocations for synchronized methods to interleave. 
If one thread is executing the synchronized method, all others thread that invoke synchronized 
method on the same Object will have to wait until first thread is done with the Object.

-> Statement(s) synchronization (Block synchronization):
If we only need to execute some subsequent lines of code not all lines (instructions) of code within a method, 
then we should synchronize only block of the code within which required instructions are exists.
For example, lets suppose there is a method that contains 100 lines of code but there are only 10 lines (one after one) 
of code which contain critical section of code i.e. these lines can modify (change) the Object’s state. 
So we only need to synchronize these 10 lines of code method to avoid any modification in state of 
the Object and to ensure that other threads can execute rest of the lines within the same method without any interruption.


Important points:
-> When a thread enters into synchronized method or block, 
   it acquires lock and once it completes its task and exits from the synchronized method, it releases the lock.
-> When thread enters into synchronized instance method or block, 
   it acquires Object level lock and when it enters into synchronized static method or block it acquires class level lock.
-> Java synchronization will throw null pointer exception if Object used in synchronized block is null. 
   For example, If in synchronized(instance), instance is null then it will throw null pointer exception.
-> In Java, wait(), notify() and notifyAll() are the important methods that are used in synchronization.
-> You can not apply java synchronized keyword with the variables.
-> Don’t synchronize on the non-final field on synchronized block because the reference to 
   the non-final field may change anytime and then different threads might synchronize on different objects i.e. no synchronization at all.

! Java synchronized method run very slowly and can degrade the performance, 
so you should synchronize the method when it is absolutely necessary 
otherwise not and to synchronize block only for critical section of the code.