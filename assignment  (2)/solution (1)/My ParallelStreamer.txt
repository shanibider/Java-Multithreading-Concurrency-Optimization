package test;

import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.function.Consumer;

public class ParallelStreamer<E> {
	
	ArrayList <BlockingQueue<E>> queues;
	int size;
	int capacity;
	Thread[] threads;
	volatile boolean stop; 
	int round;
	
	public ParallelStreamer(int size, int capacity, Consumer<E> consumer) {
		this.size=size;
		this.capacity=capacity;
		queues = new ArrayList<>();
		threads= new Thread[size];
		round=0;
		
		
		for(int i=0; i<size ; i++) {
			
			BlockingQueue <E> q = new ArrayBlockingQueue<>(capacity);
			queues.add(q);
			
			threads[i]= new Thread (()->{
				
				while (!stop) {
					try {						
						consumer.accept(q.take());
					}catch (InterruptedException e) {}				
				}				
			});
			threads[i].start();
		}
	}
		
	
	public void add(E e) throws InterruptedException{
		queues.get(round).put(e);
		round = (round+1) % size;		
	}
	
	
	
	public void endOfInput(){
		stop= true;
		for(int i=0; i<size ; i++) {
            threads[i].interrupt();
		}
		
	}

}
