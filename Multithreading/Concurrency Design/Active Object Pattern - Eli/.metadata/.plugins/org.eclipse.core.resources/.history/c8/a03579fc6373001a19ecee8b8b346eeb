package test;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class MyGenericActiveObject {
	// Data members:
	BlockingQueue<Runnable> blockingQueue = new ArrayBlockingQueue<Runnable>(100);
	Thread thread;
	volatile boolean isRunning = false;
	
	// CTOR.
	public MyGenericActiveObject() {
		this.thread = new Thread(() -> {
							while(this.isRunning == false) {
								try {
									this.blockingQueue.take().run();
								} catch (InterruptedException e) { e.printStackTrace();	}
						 }
		});
		this.thread.start();
		
	}
	
	// Puts a new Runnable object in the blocking queue -> to queue will execute 
	// the Runnable when it's turn. 
	public void execute(Runnable r) {
		try {
			this.blockingQueue.put(r);
		} catch (InterruptedException e) { e.printStackTrace();	}
	}
	
	//
	public void shutdown() {
		
	}
}
